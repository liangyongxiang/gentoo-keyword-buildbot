# -*- python -*-
# ex: set filetype=python:

import re
import os

from buildbot.plugins import *
from buildbot.process import factory

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

c['buildbotNetUsageData'] = None

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [
    worker.Worker("riscv-openrc-worker", "pass"),
    worker.Worker("riscv-systemd-worker", "pass"),
]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'https://github.com/gentoo/gentoo.git',
        workdir='githubpoller-workdir', branch='master',
        pollInterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].extend([
    schedulers.ForceScheduler(
        name = "zbt-force",
        builderNames = ["zbt-tatt"],
        codebases=[
            util.CodebaseParameter(
                "",
                label="zbt and tatt test",
                branch=util.FixedParameter(name="branch", default=""),
                revision=util.FixedParameter(name="revision", default=""),
                repository=util.FixedParameter(name="repository", default=""),
                project=util.FixedParameter(name="project", default=""),
            ),
        ],

        reason = util.FixedParameter(name="reason", default=""),

        properties = [
            util.StringParameter(
                name="atom",
                label="package name, like \"app-editors/vim\"",
                required=True,
            ),
        ],
    ),
    schedulers.ForceScheduler(
        name = "tatt-force",
        builderNames = ["tatt"],

        codebases=[
            util.CodebaseParameter(
                "",
                label="tatt test",
                branch=util.FixedParameter(name="branch", default=""),
                revision=util.FixedParameter(name="revision", default=""),
                repository=util.FixedParameter(name="repository", default=""),
                project=util.FixedParameter(name="project", default=""),
            ),
        ],

        reason = util.FixedParameter(name="reason", default=""),

        properties = [
            util.IntParameter(
                name="bugid",
                label="bug id:",
                required=True,
            ),
        ],
    ),
])

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

class TattBaseFactory(factory.BuildFactory):
    def __init__(self, *, extra_tags=[], **kwargs):
        super().__init__()
        self.workdir = util.Interpolate('%(prop:buildnumber)s')

    def tatt_run_useflags_and_clean(self, bugid=None, filename=None):
        tatt_command = ['tatt', '--verbose', '--keywording', '-j', 'buildbot']
        if filename:
            tatt_command += ['-f', filename]
        else:
            tatt_command += ['-b', bugid]
        self.addStep(
            steps.ShellCommand(
                name='run tatt',
                command=tatt_command,
                workdir=self.workdir,
            )
        )

        self.addStep(
            steps.ShellCommand(
                name='show script',
                command=['cat', 'buildbot-useflags.sh'],
                workdir=self.workdir,
            )
        )

        self.addStep(
            steps.ShellCommand(
                name='run useflags test',
                command=['./buildbot-useflags.sh'],
                usePTY=True,
                workdir=self.workdir,
                haltOnFailure=True,
            )
        )

        self.addStep(
            steps.ShellCommand(
                name='show report',
                command=['cat', 'buildbot.report'],
                workdir=self.workdir,
            )
        )

        self.addStep(
            steps.ShellCommand(
                name='run cleanup',
                command=['bash', 'buildbot-cleanup.sh'],
                workdir=self.workdir,
            )
        )

class ZarroBoogsToolsBuildFactory(TattBaseFactory):
    def __init__(self, *, extra_tags=[], **kwargs):
        super().__init__()

        self.addStep(
            steps.ShellCommand(
                name='run zbt',
                #command="zbt ls --tatt $(pwd | rev | cut -d'/' -f1-2 | rev)",
                command=['zbt', 'ls', '--tatt', util.Interpolate('%(prop:atom)s')],
                usePTY=True,
                workdir=self.workdir,
            )
        )
        self.addStep(
            steps.ShellCommand(
                name='mv file (TODO: use file zbt--CATEGORY--PN )',
                command="ls | xargs -i mv {} packages.txt",
                usePTY=True,
                workdir=self.workdir,
            )
        )

        self.tatt_run_useflags_and_clean(filename="packages.txt")

class TattBuildFactory(TattBaseFactory):
    def __init__(self, *, extra_tags=[], **kwargs):
        super().__init__()

        self.tatt_run_useflags_and_clean(bugid=util.Interpolate('%(prop:bugid)s'))


c['builders'] = []
c['builders'].extend([
    util.BuilderConfig(
        name="tatt",
        workernames=["riscv-systemd-worker"],
        factory=TattBuildFactory()
    ),
    util.BuilderConfig(
        name="zbt-tatt",
        workernames=["riscv-systemd-worker"],
        factory=ZarroBoogsToolsBuildFactory()
    ),
])

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Hello World CI"
c['titleURL'] = "whale.plct.org/keyword-buildbot"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://localhost:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.
    # It's easy to start with sqlite, but it's recommended to switch to a dedicated
    # database, such as PostgreSQL or MySQL, for use in production environments.
    # http://docs.buildbot.net/current/manual/configuration/global.html#database-specification
    'db_url' : "sqlite:///state.sqlite",
}

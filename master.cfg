# -*- python -*-
# ex: set filetype=python:

import re
import os

from buildbot.plugins import *
from buildbot.process import factory

c = BuildmasterConfig = {}
c['buildbotNetUsageData'] = None

####### SECRETS

print(os.path.dirname(os.path.realpath(__file__)))
c['secretsProviders'] = [
    secrets.SecretInAFile(dirname=os.path.join(os.path.dirname(os.path.realpath(__file__)), "secrets_files"))
]

####### WORKERS

c['workers'] = [
    worker.LocalWorker("local0"),
    worker.Worker("riscv-openrc-worker",  util.Secret("worker_passwd")),
    worker.Worker("riscv-systemd-worker", util.Secret("worker_passwd")),
]

c['protocols'] = {
    'pb': {'port': "tcp:9989:interface=127.0.0.1"}
}

####### CHANGESOURCES

pb_cs = changes.PBChangeSource(port="tcp:9999:interface=127.0.0.1", user='bgo', passwd=util.Secret("pbchange_passwd"))
maintree_cs = changes.GitPoller(
    repourl='https://github.com/gentoo/gentoo.git',
    workdir='gentoo-gitpoller-workdir', branch='master',
    pollInterval=1 * 60,
)
riscv_overlay_cs = changes.GitPoller(
    repourl='https://github.com/gentoo/riscv.git',
    workdir='gentoo-riscv-gitpoller-workdir', branch='master',
    pollInterval=1 * 60,
)
debug_cs = changes.GitPoller(
    repourl='https://github.com/liangyongxiang/gentoo-keyword-buildbot.git',
    workdir='debug-gitpoller-workdir', branch='master',
    pollInterval=1 * 60,
)

c['change_source'] = [ pb_cs, maintree_cs, riscv_overlay_cs, debug_cs ]

####### SCHEDULERS

def emerge_update_scheduler():
    return schedulers.AnyBranchScheduler(
        name="emerge update",
        treeStableTimer=60,
        builderNames=["emerge-update"],
    )

def tatt_pb_scheduler():
    @util.renderer
    def _pb_builder_names(props):
        bugid = props.getProperty('bugid')
        package = props.getProperty('package')
        if bugid:
            return ['tatt']
        elif package:
            return ['zbt-tatt']
        else:
            return list()

    return schedulers.AnyBranchScheduler(
        name='pb',
        builderNames=_pb_builder_names,
    )

def _force_scheduler(scheduler_name, builder_names, property_name, property_label):
    return schedulers.ForceScheduler(
        name = scheduler_name,
        builderNames = builder_names,
        codebases=[
            util.CodebaseParameter(
                codebase="",
                label='',
                branch=util.FixedParameter(name="branch", default=""),
                revision=util.FixedParameter(name="revision", default=""),
                repository=util.FixedParameter(name="repository", default=""),
                project=util.FixedParameter(name="project", default=""),
            ),
        ],
        reason = util.FixedParameter(name="reason", default=""),
        properties = [
            util.StringParameter(
                name=property_name,
                label=property_label,
                required=True,
            ),
        ],
    )

def zbt_force_scheduler():
    return _force_scheduler(
        scheduler_name='zbt-force',
        builder_names=['zbt-tatt'],
        property_name='package',
        property_label='package name, like "app-editors/vim"'
    )

def tatt_force_scheduler():
    return _force_scheduler(
        scheduler_name='tatt-force',
        builder_names=['tatt'],
        property_name='bugid',
        property_label='bugid in bugs.gentoo.org'
    )

def gen_keyworded_html():
    return schedulers.Periodic(name="emerge-update",
        builderNames=["keyworded"],
        periodicBuildTimer= 7 * 24 * 60 * 60
    )

c['schedulers'] = [
    emerge_update_scheduler(),
    tatt_pb_scheduler(),
    zbt_force_scheduler(),
    tatt_force_scheduler(),
    gen_keyworded_html(),
]

####### BUILDERS

def tatt_add_steps(f, workdir, filename=None, bugid=0):
    tatt_command = ['tatt', '--verbose', '--keywording', '-j', 'buildbot']
    if filename:
        tatt_command += ['-f', filename]
    else:
        tatt_command += ['-b', bugid]
    f.addStep(steps.ShellCommand(
        name='run tatt',
        command=tatt_command,
        workdir=workdir,
        haltOnFailure=True,
    ))

    f.addStep(steps.ShellCommand(
        name='show script',
        command=['cat', 'buildbot-useflags.sh'],
        workdir=workdir,
    ))

    f.addStep(steps.ShellCommand(
        name='run useflags test',
        command=['./buildbot-useflags.sh'],
        usePTY=True,
        workdir=workdir,
    ))

    f.addStep(steps.ShellCommand(
        name='show report',
        command=['cat', 'buildbot.report'],
        workdir=workdir,
    ))

    f.addStep(
        steps.ShellCommand(
        name='run cleanup',
        command=['bash', 'buildbot-cleanup.sh'],
        workdir=workdir,
    ))

def run_zbt():
    f = util.BuildFactory()

    workdir = util.Interpolate('%(prop:buildnumber)s')
    package = util.Interpolate('%(prop:package)s')

    f.addStep(steps.ShellCommand(
        name='run zbt',
        command=['zbt', 'ls', '--tatt', package],
        usePTY=True,
        workdir=workdir,
    ))
    f.addStep(steps.ShellCommand(
        name='mv file',
        command="ls | xargs -i mv {} package.txt",
        usePTY=True,
        workdir=workdir,
    ))

    tatt_add_steps(f, workdir, 'package.txt')

    return f

def run_tatt_with_bugid():
    f = util.BuildFactory()

    workdir = util.Interpolate('%(prop:buildnumber)s')
    bugid = util.Interpolate('%(prop:bugid)s')

    tatt_add_steps(f, workdir, bugid)

    return f

def emerge_update():
    f = util.BuildFactory()
    f.addStep(steps.ShellCommand(
        name='emerge sync',
        command=['emerge', '--sync'])
    )
    f.addStep(steps.ShellCommand(
        name='emerge update',
        command=[['emerge', '--quiet', '--verbose', '--update', '--deep', '--newuse', '--keep-going', '@world']])
    )
    return f

def gen_keyworded_html():
    f = util.BuildFactory()
    f.addStep(steps.FileDownload(mastersrc="scripts/keyworded.py", workerdest="keyworded.py"))
    f.addStep(steps.ShellCommand(name='run keyworded', command=['python', 'keyworded.py']))
    f.addStep(steps.DirectoryUpload(workersrc="output", masterdest="output", url="https://whale.plctlab.org/keyworded"))
    return f

build_lock = util.WorkerLock("worker_builds", maxCount=1)

c['builders'] = [
    util.BuilderConfig(
        name="emerge-update",
        workernames=["riscv-systemd-worker"],
        factory=emerge_update(),
        locks=[ build_lock.access('counting') ],
    ),
    util.BuilderConfig(
        name="tatt",
        workernames=["riscv-systemd-worker"],
        factory=run_tatt_with_bugid(),
        locks=[ build_lock.access('counting') ],
    ),
    util.BuilderConfig(
        name="zbt-tatt",
        workernames=["riscv-systemd-worker"],
        factory=run_zbt(),
        locks=[ build_lock.access('counting') ],
    ),
    util.BuilderConfig(
        name="keyworded",
        workernames=["local0"],
        factory=gen_keyworded_html(),
        locks=[ build_lock.access('counting') ],
    ),
]

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Gentoo RISCV"
c['titleURL'] = "whale.plct.org/buildbot"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://localhost:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port="tcp:8010:interface=127.0.0.1",
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

####### DB URL

c['db'] = {'db_url': 'postgresql://buildbot:bu1ldb0t@127.0.0.1/buildbot'}

